
import com.digi.xbee.api.XBeeDevice;
import com.digi.xbee.api.exceptions.XBeeException;

public class Main {

	private static final String PORT = "COM3";
	private static final int BAUD_RATE = 9600;
	private static final String DATA_TO_SEND = "Hello XBee World!";

	public static void main(String[] args) {
		XBeeDevice myDevice = new XBeeDevice(PORT, BAUD_RATE);
		byte[] dataToSend = DATA_TO_SEND.getBytes();
		
		try {
			myDevice.open();
		} catch (XBeeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("Sending broadcast data: " + new String(dataToSend));
		
		try {
			myDevice.sendBroadcastData(dataToSend);
		} catch (XBeeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("S");
	
		myDevice.close();
	}

	/*
	 * SerialPort serialPort = null;
	 * 
	 * public Main() { Scanner keyboard = new Scanner(System.in);
	 * 
	 * String[] portNames = SerialPortList.getPortNames(); System.out.println(
	 * "******************** PORT NAMES ********************");
	 * 
	 * for (int i = 0; i < portNames.length; i++) { System.out.println(
	 * "*** \tPORT " + (i + 1) + ": " + portNames[i] + " \t***"); }
	 * System.out.println("****************************************************"
	 * );
	 * 
	 * System.out.println(); System.out.print("Election: "); int num =
	 * keyboard.nextInt(); keyboard.nextLine(); num--;
	 * 
	 * // In the constructor pass the name of the port with which we work
	 * serialPort = new SerialPort(portNames[num]);
	 * 
	 * // Open port try { serialPort.openPort(); } catch (SerialPortException e)
	 * { System.err.println("Error opening serial port"); return; }
	 * 
	 * // We expose the settings. You can also use this line - //
	 * serialPort.setParams(9600, 8, 1, O); try {
	 * serialPort.setParams(SerialPort.BAUDRATE_9600, SerialPort.DATABITS_8,
	 * SerialPort.STOPBITS_1, SerialPort.PARITY_ODD); } catch
	 * (SerialPortException e) { System.err.println(
	 * "Error setting serial parameters"); return; }
	 * 
	 * loop();
	 * 
	 * try { serialPort.closePort(); } catch (SerialPortException e) {
	 * System.err.println("Error closing serial port"); return; }
	 * 
	 * }
	 * 
	 * private void loop() { try { serialPort.addEventListener(this); } catch
	 * (SerialPortException e) { System.err.println(
	 * "Error adding serial event listener"); return; } }
	 * 
	 * @Override public void serialEvent(SerialPortEvent arg0) { // TODO
	 * Auto-generated method stub
	 * 
	 * }
	 */
}
