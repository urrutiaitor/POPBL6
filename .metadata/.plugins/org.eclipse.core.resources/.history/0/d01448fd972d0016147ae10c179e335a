package conexiones;

import utils.Medicion;

public class ConnRequestServer {

	String usuario;
	int contrasena;
	Ice.Communicator ic = null;
	
	
	public ConnRequestServer(String usuario, int contrasena) {
		int[] aVector = { 9, 8, 7, 6, 8, 7, 6, 5, 6, 5, 4, 3, 5, 4, 3, 2, 1, 1 };
		Ice.Communicator ic = null;
		utils.StringVectorHolder vectorHolder = new utils.StringVectorHolder();
		int i;

		try {
			ic = Ice.Util.initialize(args);
			Ice.ObjectPrx base = ic.stringToProxy("TheVectorManipulator:default -p 10000");
			utils.GetHistorialPrx theConsultor = utils.GetHistorialPrxHelper.checkedCast(base);
			if (theConsultor == null)
				throw new Error("Invalid proxy");
			
			System.out.print("Let us consider the next vector \n\t");
			for (i = 0; i < aVector.length; i++)
				System.out.print(aVector[i] + " ");
			System.out.println();
			
			System.out.print("\nAfter sorting it remains:\n\t");
			theConsultor.sort(aVector, vectorHolder);
			for (i = 0; i < vectorHolder.value.length; i++)
				System.out.print(vectorHolder.value[i] + " ");
			System.out.println();
			
			System.out.print("\nAnd after eliminting duplicates: \n\t");
			theConsultor.copyWithoutDuplicates(vectorHolder.value, vectorHolder);
			for (i = 0; i < vectorHolder.value.length; i++)
				System.out.print(vectorHolder.value[i] + " ");
			System.out.println();
			
			ic.destroy();
		} catch (Exception e) {
			System.out.println("ERROR : " + e);
			e.printStackTrace(System.out);
		}
	}
	
	/*
	 * 
	 * Tiene que acceder al servidor, conectandose a traves de ICE y preguntar por el usuario y contrasena
	 * Si el usuario y contrasena es correcta, devuelve la conexion, si no FALSE
	 * 
	 */

	public ConnServer acceder() {
		// TODO Auto-generated method stub
		
		if(true) return new ConnServer(usuario);
		
		return null;
	}
}
